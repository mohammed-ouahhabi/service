{% extends 'base.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <!-- Include additional CSS here if needed -->
{% endblock %}

{% block body %}
    <h1>Product Stock Statistics</h1>
    <div class="chart-container" style="position: relative; height:40vh; width:80vw">
        <canvas id="stockChart"></canvas>
    </div>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        var ctx = document.getElementById('stockChart').getContext('2d');
        var originalData = {{ categoriesData|map(v => v.productCount)|json_encode|raw }};
        var categoryNames = {{ categoriesData|map(v => v.nom)|json_encode|raw }};

        // Generate a color for each product
        var backgroundColors = [];
        var borderColors = [];
        for (let i = 0; i < originalData.length; i++) {
            // Generate random color
            var randomColor = 'rgba(' + Math.floor(Math.random() * 255) + ', ' +
                Math.floor(Math.random() * 255) + ', ' +
                Math.floor(Math.random() * 255) + ', 0.2)';
            backgroundColors.push(randomColor);
            // Generate a slightly darker border color
            var borderColor = randomColor.replace('0.2', '1');
            borderColors.push(borderColor);
        }

        var stockChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: categoryNames,
                datasets: [{
                    label: 'Stock Quantity',
                    data: originalData,
                    backgroundColor: backgroundColors,
                    borderColor: borderColors,
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function (value) {
                                return value;
                            }
                        }
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function (tooltipItem) {
                                return tooltipItem.label + ': ' + tooltipItem.raw;
                            }
                        }
                    }
                }
            }
        });
    </script>
{% endblock %}
